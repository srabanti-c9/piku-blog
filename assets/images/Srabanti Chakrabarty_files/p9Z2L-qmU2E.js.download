if (self.CavalryLogger) { CavalryLogger.start_js(["DWyR\/"]); }

__d("AdsMediaPickerDialogContext",["react"],(function(a,b,c,d,e,f){"use strict";e.exports=b("react").createContext({})}),null);
__d("UFIReactionsTooltipImpl.react",["cx","fbt","ActorURI","AsyncRequest","React","ReactDOM","Tooltip","Tooltip.react","UFIReactionTypes","XUFIReactionTooltipController","emptyFunction"],(function(a,b,c,d,e,f,g,h){__p&&__p();var i=/(\r\n|[\r\n])/,j=b("UFIReactionTypes").reactions;a=function(a){"use strict";__p&&__p();babelHelpers.inheritsLoose(c,a);function c(){var c,d;for(var e=arguments.length,f=new Array(e),g=0;g<e;g++)f[g]=arguments[g];return(c=d=a.call.apply(a,[this].concat(f))||this,d.$1=null,d.$2=b("React").createRef(),d.state={count:d.props.feedback.reactioncountmap[d.props.reaction]["default"],onMouseEnter:d.onMouseEnter.bind(babelHelpers.assertThisInitialized(d))},c)||babelHelpers.assertThisInitialized(d)}var d=c.prototype;d.componentDidMount=function(){this.renderTooltip(),this.props.active&&this.loadTooltip()};d.UNSAFE_componentWillReceiveProps=function(a){a=a.feedback.reactioncountmap[a.reaction]["default"];if(a!==this.state.count){this.$1&&this.$1.abort();this.$1=null;var c=this.$2.current&&b("Tooltip").isActive(b("ReactDOM").findDOMNode(this.$2.current));this.renderTooltip();this.setState({count:a,onMouseEnter:c?null:this.onMouseEnter.bind(this)});c&&this.loadTooltip()}};d.componentWillUnmount=function(){this.$1&&this.$1.abort(),this.$1=null};d.onMouseEnter=function(){this.setState({onMouseEnter:b("emptyFunction")}),this.loadTooltip()};d.loadTooltip=function(){var a=this,c=+this.props.reaction;c=b("ActorURI").create(b("XUFIReactionTooltipController").getURIBuilder().setString("ft_ent_identifier",this.props.feedback.entidentifier).setEnum("reaction_type",c).setInt("user_count",this.props.feedback.reactioncountmap[c]["default"]).getURI(),this.props.feedback.actorforpost);this.$1=new(b("AsyncRequest"))(c).setHandler(function(b){a.$1=null,a.renderTooltip(b)}).setErrorHandler(function(b){a.$1=null,a.renderTooltip(b)});this.$1.send()};d.renderTooltip=function(a){__p&&__p();var c=a?a.getPayload():null;if(c!==null){c=c.split(i).filter(function(a){return a!==""}).map(function(a,c){return i.test(a)?b("React").createElement("br",{key:c}):a});this.setState({names:c})}else if(!a||a&&!a.getError()){c=this.$2.current!==null&&b("ReactDOM").findDOMNode(this.$2.current);if(c&&b("Tooltip").isActive(c))return;this.setState({names:[]})}};d.$3=function(){if(this.state.names===void 0)return null;var a=h._("Loading...");this.state.names&&this.state.names.length>0&&(a=this.state.names);return b("React").createElement("div",null,b("React").createElement("div",{className:"_1vea"},j[this.props.reaction].display_name),a)};d.render=function(){var a=this.$3();return b("React").createElement("a",babelHelpers["extends"]({onFocus:this.state.onMouseEnter,onMouseEnter:this.state.onMouseEnter},this.props),b("React").createElement(b("Tooltip.react"),{tooltip:a,ref:this.$2},this.props.children))};return c}(b("React").Component);e.exports=a}),null);